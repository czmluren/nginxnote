对于模块配置信息的定义，命名习惯是ngx_http_<module name>_(main|srv|loc)_conf_t。这里有个例子，就是从我们后面将要展示给大家的hello module中截取的。
typedef struct{
    ngx_str_t hello_string;
    ngx_int_t hello_counter;
}ngx_http_hello_loc_conf_t;


模块配置指令
一个模块的配置指令是定义在一个静态数组中的。同样地，我们来看一下从hello module中截取的模块配置指令的定义。
static ngx_command_t ngx_http_hello_commands[] = {
    {   ngx_string("hello_string"),
        NGX_HTTP_LOC_CONF|NGX_CONF_NOARGS|NGX_CONF_TAKE1,
        ngx_http_hello_string,
        NGX_HTTP_LOC_CONF_OFFSET,
        offsetof(ngx_http_hello_loc_conf_t, hello_string),
        NULL },

    {   ngx_string("hello_counter"),
        NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
        ngx_http_hello_counter,
        NGX_HTTP_LOC_CONF_OFFSET,
        offsetof(ngx_http_hello_loc_conf_t, hello_counter),
        NULL },

    ngx_null_command
};
其实看这个定义，就基本能看出来一些信息。例如，我们是定义了两个配置指令，一个是叫hello_string，可以接受一个参数，或者是没有参数。
另外一个命令是hello_counter，接受一个NGX_CONF_FLAG类型的参数。
除此之外，似乎看起来有点迷惑。没有关系，我们来详细看一下ngx_command_t，一旦我们了解这个结构的详细信息，那么我相信上述这个定义所表达的所有信息就不言自明了。
ngx_command_t的定义，位于src/core/ngx_conf_file.h中。
struct ngx_command_s {
    ngx_str_t             name;
    ngx_uint_t            type;
    char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
    ngx_uint_t            conf;
    ngx_uint_t            offset;
    void                 *post;
};
name: 配置指令的名称。
type: 该配置的类型，指定配置项可以出现的位置，以及它可以携带的参数个数。
    nginx提供了很多预定义的属性值（一些宏定义），通过逻辑或运算符可组合在一起，形成对这个配置指令的详细的说明。下面列出可在这里使用的预定义属性值及说明。
    NGX_CONF_NOARGS: 配置指令不接受任何参数。
    NGX_CONF_TAKE1: 配置指令接受1个参数。
    NGX_CONF_TAKE2: 配置指令接受2个参数。
       ...
    可以组合多个属性，比如一个指令即可以不填参数，也可以接受1个或者2个参数。
    NGX_CONF_MULTI: 配置指令可以接受多个参数，即个数不定。
    NGX_CONF_BLOCK: 配置指令可以接受的值是一个配置信息块。也就是一对大括号括起来的内容。里面可以再包括很多的配置指令。比如常见的server指令就是这个属性的。
    NGX_CONF_FLAG: 配置指令可以接受的值是”on”或者”off”，最终会被转成bool值。
    NGX_CONF_ANY: 配置指令可以接受的任意的参数值。一个或者多个，或者”on”或者”off”，或者是配置块。
    nginx的配置指令的参数个数不可以超过NGX_CONF_MAX_ARGS个。目前这个值被定义为8，也就是不能超过8个参数值。
  下面介绍一组说明配置指令可以出现的位置的属性。
    NGX_DIRECT_CONF: 可以出现在配置文件中最外层。例如已经提供的配置指令daemon，master_process等。
    NGX_MAIN_CONF: http、mail、events、error_log等。
    NGX_ANY_CONF: 该配置指令可以出现在任意配置级别上。
  对于我们编写的大多数模块而言，都是在处理http相关的事情，也就是所谓的都是 NGX_HTTP_MODULE ，对于这样类型的模块，其配置可能出现的位置也是分为直接出现在http里面，以及其他位置。
    NGX_HTTP_MAIN_CONF: 可以直接出现在http配置指令里。
    NGX_HTTP_SRV_CONF: 可以出现在http里面的server配置指令里。
    NGX_HTTP_LOC_CONF: 可以出现在http server块里面的location配置指令里。
    NGX_HTTP_UPS_CONF: 可以出现在http里面的upstream配置指令里。
    NGX_HTTP_SIF_CONF: 可以出现在http里面的server配置指令里的if语句所在的block中。
    NGX_HTTP_LMT_CONF: 可以出现在http里面的limit_except指令的block中。
    NGX_HTTP_LIF_CONF: 可以出现在http server块里面的location配置指令里的if语句所在的block中。
set: 出现了name中指定的配置项后，将会调用set方法处理配置项的参数。函数指针要求的函数原型如下,
    char *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
  返回值：成功 NGX_OK，否则返回 NGX_CONF_ERROR 或者 是一个自定义的错误信息的字符串。
  再看一下这个函数被调用的时候，传入的三个参数。
    cf: 该参数里面保存从配置文件读取到的原始字符串以及相关的一些信息。特别注意的是这个参数的args字段是一个ngx_str_t类型的数组，该数组的首个元素是这个配置指令本身，
        第二个元素是指令的第一个参数，第三个元素是第二个参数，依次类推。
    cmd: 这个配置指令对应的ngx_command_t结构。
    conf: 就是定义的存储这个配置值的结构体，比如在上面展示的那个 ngx_http_hello_loc_conf_t 。当解析这个 hello_string 变量的时候，传入的conf就指向一个 
          ngx_http_hello_loc_conf_t 类型的变量。用户在处理的时候可以使用类型转换，转换成自己知道的类型，再进行字段的赋值。
为了更加方便的实现对配置指令参数的读取，nginx已经默认提供了对一些标准类型的参数进行读取的函数，可以直接赋值给set字段使用。下面来看一下这些已经实现的set类型函数。
    ngx_conf_set_flag_slot: 读取NGX_CONF_FLAG类型的参数。
    ngx_conf_set_str_slot: 读取字符串类型的参数。
    ngx_conf_set_str_array_slot: 读取字符串数组类型的参数。
    ngx_conf_set_keyval_slot: 读取键值对类型的参数。
    ngx_conf_set_num_slot: 读取整数类型(有符号整数ngx_int_t)的参数。
    ngx_conf_set_size_slot: 读取size_t类型的参数，也就是无符号数。
    ngx_conf_set_off_slot: 读取off_t类型的参数。
    ngx_conf_set_msec_slot: 读取毫秒值类型的参数。
    ngx_conf_set_sec_slot: 读取秒值类型的参数。
    ngx_conf_set_bufs_slot: 读取的参数值是2个，一个是buf的个数，一个是buf的大小。例如： output_buffers 1 128k;
    ngx_conf_set_enum_slot: 读取枚举类型的参数，将其转换成整数ngx_uint_t类型。
    ngx_conf_set_bitmask_slot: 读取参数的值，并将这些参数的值以bit位的形式存储。例如：HttpDavModule模块的dav_methods指令。
conf: 在配置文件中的偏移量。该字段被NGX_HTTP_MODULE类型模块所用 (我们编写的基本上都是NGX_HTTP_MOUDLE，只有一些nginx核心模块是非NGX_HTTP_MODULE)，该字段指定当前配置项存储的内存位置。实际上是使用哪个内存池的问题。因为http模块对所有http模块所要保存的配置信息，划分了main, server和location三个地方进行存储，每个地方都有一个内存池用来分配存储这些信息的内存。这里可能的值为 NGX_HTTP_MAIN_CONF_OFFSET、NGX_HTTP_SRV_CONF_OFFSET或NGX_HTTP_LOC_CONF_OFFSET。当然也可以直接置为0，就是NGX_HTTP_MAIN_CONF_OFFSET。
offset: 指定该配置项值的精确存放位置，一般指定为某一个结构体变量的字段偏移，与conf配合使用。
post: 配置项读取后的处理方法，必须是ngx_conf_post_t结构的指针。可以指向任何一个在读取配置过程中需要的数据，以便于进行配置读取的处理。大多数时候，都不需要，所以简单地设为0即可。

看到这里，应该就比较清楚了。ngx_http_hello_commands这个数组每5个元素为一组，用来描述一个配置项的所有情况。那么如果有多个配置项，只要按照需要再增加5个对应的元素对新的配置项进行说明。

需要注意的是，就是在ngx_http_hello_commands这个数组定义的最后，都要加一个ngx_null_command作为结尾。


模块上下文结构
这是一个ngx_http_module_t类型的静态变量。这个变量实际上是提供一组回调函数指针，这些函数有在创建存储配置信息的对象的函数，也有在创建前和创建后会调用的函数。这些函数都将被nginx在合适的时间进行调用。
typedef struct {
    //解析配置文件前调用，即在解析http{...}内的配置项前回调
    ngx_int_t   (*preconfiguration)(ngx_conf_t *cf);
    //完成配置文件的解析后调用，即解析完http{...}内的所有配置项后回调
    ngx_int_t   (*postconfiguration)(ngx_conf_t *cf);

    //创建用于存储http全局配置项的结构体,该结构体存储直属于http{}块的配置项参数，在解析main配置项前调用
    void       *(*create_main_conf)(ngx_conf_t *cf);
    //常用于初始化main级别配置项，在解析main配置项后调用
    char       *(*init_main_conf)(ngx_conf_t *cf, void *conf);

    //创建用于存储可同时出现在main、srv级别配置的结构体,该结构体中的成员与server配置相关联
    void       *(*create_srv_conf)(ngx_conf_t *cf);
    //create_srv_conf产生的结构体所要解析的配置项，可能同时出现在main、srv级别中，merge_srv_conf方法可以把出现在main级别中的配置项值合并到srv级别配置项中
    //该函数并非必须提供，当预计到绝对不会发生需要合并的情况的时候，就无需提供，建议提供
    char       *(*merge_srv_conf)(ngx_conf_t *cf, void *prev, void *conf);

    //创建用于存储可同时出现在main、srv、loc级别配置的结构体,该结构体中的成员与location配置相关联
    void       *(*create_loc_conf)(ngx_conf_t *cf);
    //create_loc_conf产生的结构体所要解析的配置项，可能同时出现在main、srv、loc级别中，merge_loc_conf方法可以把分别出现在main、srv级别中的配置项值合并到loc级别配置项中
    char       *(*merge_loc_conf)(ngx_conf_t *cf, void *prev, void *conf);
} ngx_http_module_t;

Nginx里面的配置信息都是上下一层层的嵌套的，对于具体某个location的话，对于同一个配置，如果当前层次没有定义，那么就使用上层的配置，否则使用当前层次的配置。
下面来看一下hello模块的模块上下文的定义，加深一下印象。
static ngx_http_module_t ngx_http_hello_module_ctx = {
    NULL,                          /* preconfiguration */
    ngx_http_hello_init,           /* postconfiguration */

    NULL,                          /* create main configuration */
    NULL,                          /* init main configuration */

    NULL,                          /* create server configuration */
    NULL,                          /* merge server configuration */

    ngx_http_hello_create_loc_conf, /* create location configuration */
    NULL                            /* merge location configuration */
};
注意：这里并没有提供merge_loc_conf函数，因为我们这个模块的配置指令已经确定只出现在NGX_HTTP_LOC_CONF中这一个层次上，不会发生需要合并的情况。


模块的定义
对于开发一个模块来说，我们都需要定义一个 ngx_module_t 类型的变量来说明这个模块本身的信息，从某种意义上来说，这是这个模块最重要的一个信息，它告诉了nginx这个模块的一些信息，上面定义的配置信息，还有模块上下文信息，都是通过这个结构来告诉nginx系统的，也就是加载模块的上层代码，都需要通过定义的这个结构，来获取这些信息。
我们先来看下ngx_module_t的定义:
typedef struct ngx_module_s      ngx_module_t;
struct ngx_module_s {
    //ctx_index 表示当前模块在这类模块中的序号，这个成员常常是由管理这类模块的一个nginx核心模块设置。
    //nginx模块化设计非常依赖于各模块的顺序，它们既用于表达优先级，也用于表明每个模块的位置，借以帮助nginx框架快速获取某个模块的数据
    ngx_uint_t            ctx_index;

    //index表示当前模块在 ngx_modules 数组中的序号
    ngx_uint_t            index;

    //spare系列的保留变量，暂未使用
    ngx_uint_t            spare0;  
    ngx_uint_t            spare1;

    ngx_uint_t            abi_compatibility;
    ngx_uint_t            major_version;
    ngx_uint_t            minor_version;

    //ctx用于指向一类模块的上下文结构体
    void                 *ctx;

    //commands将处理nginx.conf中的配置项
    ngx_command_t        *commands;

    //type表示该模块的类型，它与ctx指针时紧密相关的
    ngx_uint_t            type;

    ngx_int_t           (*init_master)(ngx_log_t *log);
    ngx_int_t           (*init_module)(ngx_cycle_t *cycle);
    ngx_int_t           (*init_process)(ngx_cycle_t *cycle);
    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);
    void                (*exit_thread)(ngx_cycle_t *cycle);
    void                (*exit_process)(ngx_cycle_t *cycle);
    void                (*exit_master)(ngx_cycle_t *cycle);

    //保留字段，目前没有使用
    uintptr_t             spare_hook0;
    uintptr_t             spare_hook1;
    uintptr_t             spare_hook2;
    uintptr_t             spare_hook3;
    uintptr_t             spare_hook4;
    uintptr_t             spare_hook5;
    uintptr_t             spare_hook6;
    uintptr_t             spare_hook7;
};

#define NGX_NUMBER_MAJOR  3
#define NGX_NUMBER_MINOR  1
#define NGX_MODULE_V1          0, 0, 0, 0,                              \
    NGX_DSO_ABI_COMPATIBILITY, NGX_NUMBER_MAJOR, NGX_NUMBER_MINOR
#define NGX_MODULE_V1_PADDING  0, 0, 0, 0, 0, 0, 0, 0

再看一下hello模块的模块定义。
ngx_module_t ngx_http_hello_module = {
    NGX_MODULE_V1,
    &ngx_http_hello_module_ctx,    /* module context */
    ngx_http_hello_commands,       /* module directives */
    NGX_HTTP_MODULE,               /* module type */
    NULL,                          /* init master */
    NULL,                          /* init module */
    NULL,                          /* init process */
    NULL,                          /* init thread */
    NULL,                          /* exit thread */
    NULL,                          /* exit process */
    NULL,                          /* exit master */
    NGX_MODULE_V1_PADDING
};
模块可以提供一些回调函数给nginx，当nginx在创建进程线程或者结束进程线程时进行调用。但大多数模块在这些时刻并不需要做什么，所以都简单赋值为NULL。


handler模块的基本结构
除了上一节介绍的模块的基本结构以外，handler模块必须提供一个真正的处理函数，这个函数负责对来自客户端请求的真正处理。这个函数的处理，既可以选择自己直接生成内容，也可以选择拒绝处理，由后续的handler去进行处理，或者是选择丢给后续的filter进行处理。
来看一下这个函数的原型申明:
    typedef ngx_int_t (*ngx_http_handler_pt)(ngx_http_request_t *r);
    r是http请求。里面包含请求所有的信息，这里不详细说明了，可以参考别的章节的介绍。
    该函数处理成功返回NGX_OK，处理发生错误返回NGX_ERROR，拒绝处理（留给后续的handler进行处理）返回NGX_DECLINE。返回NGX_OK也就代表给客户端的响应已经生成好了，否则返回NGX_ERROR就发生错误了。

handler模块的挂载
handler模块真正的处理函数通过两种方式挂载到处理过程中，一种方式就是按处理阶段挂载;另外一种挂载方式就是按需挂载。

按处理阶段挂载
为了更精细地控制对于客户端请求的处理过程，nginx把这个处理过程划分成了11个阶段。他们从前到后，依次列举如下：
NGX_HTTP_POST_READ_PHASE: 读取请求内容阶段                 ngx_http_core_generic_phase
NGX_HTTP_SERVER_REWRITE_PHASE: Server请求地址重写阶段      ngx_http_core_rewrite_phase
NGX_HTTP_FIND_CONFIG_PHASE: 配置查找阶段                   ngx_http_core_find_config_phase
NGX_HTTP_REWRITE_PHASE: Location请求地址重写阶段           ngx_http_core_rewrite_phase
NGX_HTTP_POST_REWRITE_PHASE: 请求地址重写提交阶段          ngx_http_core_post_rewrite_phase
NGX_HTTP_PREACCESS_PHASE: 访问权限检查准备阶段             ngx_http_core_generic_phase
NGX_HTTP_ACCESS_PHASE: 访问权限检查阶段                    ngx_http_core_access_phase
NGX_HTTP_POST_ACCESS_PHASE: 访问权限检查提交阶段           ngx_http_core_post_access_phase
NGX_HTTP_TRY_FILES_PHASE: 配置项try_files处理阶段          ngx_http_core_try_files_phase
NGX_HTTP_CONTENT_PHASE: 内容产生阶段                       ngx_http_core_content_phase
NGX_HTTP_LOG_PHASE: 日志模块处理阶段                       ngx_http_core_generic_phase
一般情况下，我们自定义的模块，大多数是挂载在NGX_HTTP_CONTENT_PHASE阶段的。挂载的动作一般是在模块上下文调用的postconfiguration函数中。

注意：有几个阶段是特例，它不调用挂载地任何的handler，也就是你就不用挂载到这几个阶段了：
NGX_HTTP_FIND_CONFIG_PHASE
NGX_HTTP_POST_ACCESS_PHASE
NGX_HTTP_POST_REWRITE_PHASE
NGX_HTTP_TRY_FILES_PHASE
所以其实真正是有7个phase你可以去挂载handler。

挂载的代码如下（摘自hello module）:
static ngx_int_t
ngx_http_hello_init(ngx_conf_t *cf){
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);
    h = ngx_array_push(&cmcf->phases[NGX_HTTP_CONTENT_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_hello_handler;

    return NGX_OK;
}
使用这种方式挂载的handler也被称为 content phase handlers。

按需挂载
以这种方式挂载的handler也被称为 content handler。

当一个请求进来以后，nginx从 NGX_HTTP_POST_READ_PHASE 阶段开始依次执行每个阶段中所有handler。执行到 NGX_HTTP_CONTENT_PHASE 阶段的时候，如果这个location有一个对应的content handler模块，那么就去执行这个 content handler 模块真正的处理函数。否则继续依次执行 NGX_HTTP_CONTENT_PHASE 阶段中所有 content phase handlers ，直到某个函数处理返回NGX_OK或者NGX_ERROR。

换句话说，当某个 location 处理到 NGX_HTTP_CONTENT_PHASE 阶段时，如果有 content handler 模块，那么 NGX_HTTP_CONTENT_PHASE 挂载的所有 content phase handlers 都不会被执行了。

但是使用这个方法挂载上去的 handler 有一个特点是必须在 NGX_HTTP_CONTENT_PHASE 阶段才能执行到。如果你想自己的 handler 在更早的阶段执行，那就不要使用这种挂载方式。

那么在什么情况会使用这种方式来挂载呢？一般情况下，某个模块对某个 location 进行了处理以后，发现符合自己处理的逻辑，而且也没有必要再调用 NGX_HTTP_CONTENT_PHASE 阶段的其它 handler 进行处理的时候，就动态挂载上这个 handler。

下面来看一下使用这种挂载方式的具体例子（摘自Emiller’s Guide To Nginx Module Development）。
static char *
ngx_http_circle_gif(ngx_conf_t *cf, ngx_command_t *cmd, void *conf){
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
    clcf->handler = ngx_http_circle_gif_handler;

    return NGX_CONF_OK;
}

现一个handler的步骤:
1、编写模块基本结构。包括模块的定义，模块上下文结构，模块的配置结构等。
2、实现handler的挂载函数。根据模块的需求选择正确的挂载方式。
3、编写handler处理函数。模块的功能主要通过这个函数来完成。




